Index: test/queryClient.test.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Copyright 2020-2022 SubQuery Pte Ltd authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nimport { GraphqlQueryClient } from '../packages/network-clients';\nimport { NETWORK_CONFIGS } from '../packages/network-clients/src/config';\nimport assert from 'assert';\nimport { GET_INDEXER } from \"../packages/network-clients/src/graphql/indexers\";\nimport { GET_INDEXERS } from \"../packages/network-clients/src/graphql/indexers\";\nimport {\n  GET_ALL_DELEGATIONS,\n  GET_DELEGATION,\n  GET_DELEGATOR,\n  GET_INDEXER_DELEGATORS\n} from \"@subql/network-clients/dist/graphql/delegations\";\nimport {\n  GET_EXPIRED_SERVICE_AGREEMENTS,\n  GET_SERVICE_AGREEMENTS,\n  GET_SPECIFIC_SERVICE_AGREEMENTS\n} from \"@subql/network-clients/dist/graphql/agreements\";\nimport {\n  GET_ACCEPTED_OFFERS,\n  GET_DEPLOYMENT,\n  GET_DEPLOYMENT_INDEXERS,\n  GET_DEPLOYMENT_INDEXERS_WITH_INDEXER\n} from \"@subql/network-clients/dist/graphql/deployments\";\nimport {\n  GET_ALL_OPEN_OFFERS,\n  GET_OWN_EXPIRED_OFFERS,\n  GET_OWN_OPEN_OFFERS, GET_SPECIFIC_OPEN_OFFERS\n} from \"@subql/network-clients/dist/graphql/offers\";\nimport { GET_DEPLOYMENT_PLANS, GET_PLAN_TEMPLATES, GET_PLANS } from \"@subql/network-clients/dist/graphql/plans\";\nimport { GET_PROJECT, GET_PROJECT_DEPLOYMENTS, GET_PROJECTS } from \"@subql/network-clients/dist/graphql/project\";\nimport { GET_INDEXER_REWARDS, GET_REWARDS, GET_WITHDRAWLS } from \"@subql/network-clients/dist/graphql/staking\";\n\nfunction deepAssert(obj: any){\n  Object.keys(obj).forEach(key => {\n    assert(obj[key], `field ${key} is undefined`);\n    if (typeof obj[key] === 'object') deepAssert(obj[key]);\n  })\n}\n\ndescribe('query client', () => {\n  let client: GraphqlQueryClient;\n  const date: Date = new Date();\n\n  beforeAll(async () => {\n    const config = NETWORK_CONFIGS.kepler;\n    assert(config, 'network config not defined');\n    client = new GraphqlQueryClient(config);\n  }, 160000);\n\n  it('can query indexer detail', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_INDEXER,\n      variables: { address: '0xCef192586b70e3Fc2FAD76Dd1D77983a30d38D04' },\n    });\n\n    assert(result, 'cannot request query GET_INDEXER');\n    deepAssert(result.data.indexer);\n  }, 16000)\n\n  it('can query indexer delegator', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_INDEXER_DELEGATORS,\n      variables: { id:'0xCef192586b70e3Fc2FAD76Dd1D77983a30d38D04' },\n    });\n    assert(result, 'cannot request query GET_INDEXER_DELEGATORS');\n    deepAssert(result.data.indexer);\n    expect(result.data.indexer.delegations.nodes).toBeTruthy()\n    expect(result.data.indexer.delegation).toBeUndefined()\n  }, 16000)\n\n  it('can query Delegation detail', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_DELEGATION,\n      variables: { id: '0xCef192586b70e3Fc2FAD76Dd1D77983a30d38D04:0xCef192586b70e3Fc2FAD76Dd1D77983a30d38D04' },\n    });\n    assert(result, 'cannot request query GET_DELEGATION');\n    deepAssert(result.data.delegation);\n  }, 16000)\n\n  it('can query delegator detail', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_DELEGATOR,\n      variables: { address:'0xCef192586b70e3Fc2FAD76Dd1D77983a30d38D04' },\n    });\n    assert(result, 'cannot request query GET_DELEGATOR');\n    deepAssert(result.data.delegator);\n    expect(result.data.delegator).toBeTruthy()\n  }, 16000)\n\n  it('can query all delegations', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_ALL_DELEGATIONS,\n      variables: {},\n    });\n    assert(result, 'cannot request query GET_ALL_DELEGATIONS');\n    expect(result.data.delegations.nodes).toBeTruthy()\n  }, 16000)\n\n  it('can query indexer agreements', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_SERVICE_AGREEMENTS,\n      variables: {address:'0xa40987037547C2cc5df0b06fFe52B7FdCCB7D4FC',now:date},\n    });\n    assert(result, 'cannot request query GET_SERVICE_AGREEMENTS');\n    console.log(result.data.serviceAgreements.nodes)\n    expect(result.data.serviceAgreements).toBeTruthy()\n  }, 16000)\n\n  it('can query expired agreements', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_EXPIRED_SERVICE_AGREEMENTS,\n      variables: {address:'0xCef192586b70e3Fc2FAD76Dd1D77983a30d38D04',now:date},\n    });\n    assert(result, 'cannot request query GET_EXPIRED_SERVICE_AGREEMENTS');\n    expect(result.data.serviceAgreements.nodes).toBeTruthy()\n  }, 16000)\n\n  it('can query project agreements', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_SPECIFIC_SERVICE_AGREEMENTS,\n      variables: {deploymentId:'Qmdpka4MpaUtGP7B3AAoPji4H6X7a2ir53a1mxnUumqMm4',now:date},\n    });\n    assert(result, 'cannot request query GET_SPECIFIC_SERVICE_AGREEMENTS');\n    console.log(result.data.serviceAgreements.nodes)\n    expect(result.data.serviceAgreements.nodes).toBeTruthy()\n  }, 16000)\n\n  it('can query deployment by projectCid', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_DEPLOYMENT,\n      variables: {deploymentId:'Qmdpka4MpaUtGP7B3AAoPji4H6X7a2ir53a1mxnUumqMm4'},\n    });\n    assert(result, 'cannot request query GET_DEPLOYMENT');\n    expect(result.data.deployment.id).toEqual('Qmdpka4MpaUtGP7B3AAoPji4H6X7a2ir53a1mxnUumqMm4')\n  }, 16000)\n\n  it('can query deploymnet indexer', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_DEPLOYMENT_INDEXERS,\n      variables: {deploymentId:'Qmdpka4MpaUtGP7B3AAoPji4H6X7a2ir53a1mxnUumqMm4'},\n    });\n    assert(result, 'cannot request query GET_DEPLOYMENT_INDEXERS');\n    expect(result.data.deploymentIndexers.totalCount).toEqual(2)\n  }, 16000)\n\n  it('can query GET_DEPLOYMENT_INDEXERS_WITH_INDEXER', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_DEPLOYMENT_INDEXERS_WITH_INDEXER,\n      variables: {indexerAddress:'0xf9e4E6307a3186991F153249294815228D3a4634'},\n    });\n    assert(result, 'cannot request query GET_DEPLOYMENT_INDEXERS_WITH_INDEXER');\n    expect(result.data.deploymentIndexers).toBeTruthy()\n  }, 16000)\n\n  it('can query get accepted offer', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_ACCEPTED_OFFERS,\n      variables: {$address:'0xf9e4E6307a3186991F153249294815228D3a4634',$offerId:'1'},\n    });\n    assert(result, 'cannot request query GET_ACCEPTED_OFFERS');\n    console.log(result.data)\n    expect(result.data).toBeTruthy()\n    deepAssert(result.data.indexer);\n  }, 16000)\n\n  it('can query get indexers', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_INDEXERS,\n      variables: {},\n    });\n    assert(result, 'cannot request query GET_INDEXERS');\n    expect(result.data.indexers).toBeTruthy()\n    deepAssert(result.data.indexers);\n  }, 16000)\n\n  it('can query get own offer', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_OWN_OPEN_OFFERS,\n      variables: {consumer:'0xD5d48b83389150FFaa0B897ffC88817622abce58',now:date},\n    });\n    assert(result, 'cannot request query GET_OWN_OPEN_OFFERS');\n    console.log(result.data)\n    expect(result.data).toBeTruthy()\n  }, 16000)\n\n  it('can query get expired offer', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_OWN_EXPIRED_OFFERS,\n      variables: {consumer:'0xD5d48b83389150FFaa0B897ffC88817622abce58',now:date},\n    });\n    assert(result, 'cannot request query GET_OWN_EXPIRED_OFFERS');\n    console.log(result.data)\n    expect(result.data.offers).toBeDefined()\n  }, 16000)\n\n  it('can query get expired offer', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_OWN_EXPIRED_OFFERS,\n      variables: {consumer:'0xD5d48b83389150FFaa0B897ffC88817622abce58',now:date},\n    });\n    assert(result, 'cannot request query GET_OWN_EXPIRED_OFFERS');\n    expect(result.data.offers).toBeDefined()\n  }, 16000)\n\n  it('can query get all open offer', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_ALL_OPEN_OFFERS,\n      variables: {now:date},\n    });\n    assert(result, 'cannot request query GET_ALL_OPEN_OFFERS');\n    expect(result.data.offers.nodes).toBeDefined()\n  }, 16000)\n\n  it('can query get project open offer', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_SPECIFIC_OPEN_OFFERS,\n      variables: {deploymentId:'QmPemHcmAJ6BRyV13FN91miLCHNtqXLLacsqYjSaTmbFmr',now:date},\n    });\n    assert(result, 'cannot request query GET_SPECIFIC_OPEN_OFFERS');\n    console.log(result.data.offers.nodes)\n    expect(result.data.offers.nodes).toBeDefined()\n  }, 16000)\n\n  it('can query get deployment plan', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_DEPLOYMENT_PLANS,\n      variables: {deploymentId:'QmQnhLMgV3SrXbunjgHjnfdw32BAHQS3nNhLWKpNjtFTSZ',address:'0xa40987037547C2cc5df0b06fFe52B7FdCCB7D4FC'},\n    });\n    assert(result, 'cannot request query GET_DEPLOYMENT_PLANS');\n    expect(result.data.plans).toBeDefined()\n    expect(result.data.offers).toBeUndefined()\n  }, 16000)\n\n  it('can query get plan templates', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_PLAN_TEMPLATES,\n      variables: {},\n    });\n    assert(result, 'cannot request query GET_PLAN_TEMPLATES');\n    expect(result.data.planTemplates).toBeDefined()\n  }, 16000)\n\n  it('can query get plans', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_PLANS,\n      variables: {address:'0xa40987037547C2cc5df0b06fFe52B7FdCCB7D4FC'},\n    });\n    assert(result, 'cannot request query GET_PLANS');\n    expect(result.data.plans.nodes).toBeDefined()\n  }, 16000)\n\n  it('can query get project', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_PROJECT,\n      variables: {id:'0x01'},\n    });\n    assert(result, 'cannot request query GET_PROJECT');\n    expect(result.data.project).toBeDefined()\n  }, 16000)\n\n  it('can query get all projects', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_PROJECTS,\n      variables: {},\n    });\n    assert(result, 'cannot request query GET_PROJECTS');\n    console.log(result.data.projects.nodes)\n    expect(result.data.projects.nodes).toBeTruthy()\n  }, 16000)\n\n  it('can query get project deployment', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_PROJECT_DEPLOYMENTS,\n      variables: {projectId:'0x01'},\n    });\n    assert(result, 'cannot request query GET_PROJECT_DEPLOYMENTS');\n    expect(result.data.project.deployments.nodes).toBeTruthy()\n    expect(result.data.project.__typename).toEqual('Project')\n  }, 16000)\n\n  it('can query get withdrawls', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_WITHDRAWLS,\n      variables: {delegator:'0xa40987037547C2cc5df0b06fFe52B7FdCCB7D4FC'},\n    });\n    assert(result, 'cannot request query GET_WITHDRAWLS');\n    expect(result.data.withdrawls).toBeTruthy()\n    expect(result.data.withdrawls.__typename).toEqual('WithdrawlsConnection')\n  }, 16000)\n\n  it('can query get rewards', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_REWARDS,\n      variables: {address:'0xa40987037547C2cc5df0b06fFe52B7FdCCB7D4FC'},\n    });\n    assert(result, 'cannot request query GET_REWARDS');\n    console.log(result.data)\n    expect(result.data.rewards).toBeTruthy()\n    expect(result.data.unclaimedRewards.nodes).toBeTruthy()\n    expect(result.data.unclaimedRewards.__typename).toEqual('UnclaimedRewardsConnection')\n  }, 16000)\n\n  it('can query get indexer rewards', async () => {\n    const apolloClient = client.explorerClient;\n    const result = await apolloClient.query({\n      query: GET_INDEXER_REWARDS,\n      variables: {address:'0xa40987037547C2cc5df0b06fFe52B7FdCCB7D4FC',era1:'10',era2:'100'},\n    });\n    assert(result, 'cannot request query GET_INDEXER_REWARDS');\n    console.log(result.data)\n    expect(result.data.indexerRewards).toBeTruthy()\n    expect(result.data.indexerRewards.nodes).toBeTruthy()\n    expect(result.data.indexerRewards.__typename).toEqual('IndexerRewardsConnection')\n  }, 16000)\n});\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/queryClient.test.ts b/test/queryClient.test.ts
--- a/test/queryClient.test.ts	
+++ b/test/queryClient.test.ts	
@@ -68,8 +68,6 @@
     });
     assert(result, 'cannot request query GET_INDEXER_DELEGATORS');
     deepAssert(result.data.indexer);
-    expect(result.data.indexer.delegations.nodes).toBeTruthy()
-    expect(result.data.indexer.delegation).toBeUndefined()
   }, 16000)
 
   it('can query Delegation detail', async () => {
